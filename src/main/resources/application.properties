spring.application.name=sharding-demo
server.port=8080

# 声明数据源，名称不需要和数据库名同名，这里可以随意命名（必须）
spring.shardingsphere.datasource.names=ds1,ds2
# 配置ds1数据源（必须）。其中type为数据源类型，这里选用Hikari，其余的根据数据源的需求来配置。
# jdbc-url这个属性是Hikari要用的，其他的数据源如Druid的为url属性，不同的数据源的key不同，请按照实际情况处理
spring.shardingsphere.datasource.ds1.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds1.jdbc-url=jdbc:mysql://localhost:3306/db1?useSSL=false&characterEncoding=UTF-8&serverTimeZone=Asia/Shanghai
spring.shardingsphere.datasource.ds1.username=root
spring.shardingsphere.datasource.ds1.password=123456
# 配置ds2数据源（必须）
spring.shardingsphere.datasource.ds2.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds2.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds2.jdbc-url=jdbc:mysql://localhost:3306/db2?useSSL=false&characterEncoding=UTF-8&serverTimeZone=Asia/Shanghai
spring.shardingsphere.datasource.ds2.username=root
spring.shardingsphere.datasource.ds2.password=123456

# 配置分库策略（可选），我这里让t_order表根据user_id进行分库。在spring boot中，占位符需要用$->{}来表示，官方示例中的${}无法使用，这里要注意
spring.shardingsphere.sharding.tables.t_order.database-strategy.inline.sharding-column=user_id
spring.shardingsphere.sharding.tables.t_order.database-strategy.inline.algorithm-expression=ds$->{user_id % 2 + 1}
# 配置实际的数据节点（必须）,我们既分库又分表，且库和表的数量都是2，所以下面的表达式这样写：
spring.shardingsphere.sharding.tables.t_order.actual-data-nodes=ds$->{1..2}.t_order_$->{1..2}
# 配置分表策略（必须）。我们通过order_id进行分表，奇数的order_id会路由到t_order_2，偶数路由到t_order_1。
# 如果使用了ShardingJDBC，那么即使不分表的话，也要配置该分表的策略（直接把表写死即可，不添加变量）
spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.sharding-column=order_id
spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.algorithm-expression=t_order_$->{order_id % 2 + 1}
# 配置主键生成策略（可选），我们只配置order_id的生成，因为是表的主键，
# 我们在写插入的语句的时候就可以不需要传order_id，ShardingJDBC会自动使用SNOWFLAKE算法生成，然后拼接到SQL中插入
spring.shardingsphere.sharding.tables.t_order.key-generator.column=order_id
spring.shardingsphere.sharding.tables.t_order.key-generator.type=SNOWFLAKE
# 配置打印实际执行的SQL（生产环境关闭）
spring.shardingsphere.props.sql.show=true